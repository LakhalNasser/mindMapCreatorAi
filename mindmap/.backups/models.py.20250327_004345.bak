from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import math

class Node(QGraphicsItem):
    def __init__(self, text, level=0):
        super().__init__()
        self.text = text
        self.level = level
        
        # حالة العقدة
        self._is_highlighted = False
        self._is_hovered = False
        self._is_selected = False
        
        # خصائص العقدة
        self.setAcceptHoverEvents(True)
        self.setFlag(QGraphicsItem.ItemIsMovable)
        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)
        self.setFlag(QGraphicsItem.ItemIsSelectable)
        
        # مخطط الألوان حسب المستوى
        self.color_schemes = {
            0: {  # الجذر
                "bg": QColor("#1976D2"),
                "border": QColor("#1565C0"),
                "text": QColor("#FFFFFF"),
                "highlight": QColor("#2196F3")
            },
            1: {  # المستوى الأول
                "bg": QColor("#388E3C"),
                "border": QColor("#2E7D32"),
                "text": QColor("#FFFFFF"),
                "highlight": QColor("#4CAF50")
            },
            2: {  # المستوى الثاني
                "bg": QColor("#F57C00"),
                "border": QColor("#EF6C00"),
                "text": QColor("#FFFFFF"),
                "highlight": QColor("#FF9800")
            },
            3: {  # المستوى الثالث
                "bg": QColor("#7B1FA2"),
                "border": QColor("#6A1B9A"),
                "text": QColor("#FFFFFF"),
                "highlight": QColor("#9C27B0")
            },
            4: {  # المستوى الرابع وما بعده
                "bg": QColor("#C62828"),
                "border": QColor("#B71C1C"),
                "text": QColor("#FFFFFF"),
                "highlight": QColor("#E53935")
            }
        }
        
        # أحجام العقد حسب المستوى
        self.node_sizes = {
            0: (200, 60),  # الجذر
            1: (180, 55),  # المستوى الأول
            2: (160, 50),  # المستوى الثاني
            3: (140, 45),  # المستوى الثالث
            4: (120, 40)   # المستوى الرابع وما بعده
        }

    def boundingRect(self):
        """تحديد حدود العقدة"""
        width, height = self.node_sizes.get(
            min(self.level, 4),
            self.node_sizes[4]
        )
        return QRectF(-width/2, -height/2, width, height)

    def shape(self):
        """تحديد شكل العقدة للتفاعل"""
        path = QPainterPath()
        path.addRoundedRect(self.boundingRect(), 10, 10)
        return path

    def paint(self, painter, option, widget):
        """رسم العقدة"""
        painter.setRenderHint(QPainter.Antialiasing)
        
        # تحديد الألوان
        colors = self.color_schemes.get(min(self.level, 4))
        bg_color = colors["bg"]
        border_color = colors["border"]
        text_color = colors["text"]
        
        # تطبيق تأثيرات التحديد والتحويم
        if self._is_highlighted:
            bg_color = colors["highlight"]
            border_color = border_color.lighter(120)
        elif self._is_hovered:
            bg_color = bg_color.lighter(110)
        elif self._is_selected:
            bg_color = bg_color.darker(110)
        
        # رسم الظل
        if not self._is_highlighted:
            shadow = QGraphicsDropShadowEffect()
            shadow.setBlurRadius(15)
            shadow.setOffset(3, 3)
            shadow.setColor(QColor(0, 0, 0, 50))
        
        # رسم خلفية العقدة
        rect = self.boundingRect()
        gradient = QLinearGradient(rect.topLeft(), rect.bottomRight())
        gradient.setColorAt(0, bg_color.lighter(110))
        gradient.setColorAt(1, bg_color)
        
        # رسم الإطار والخلفية
        painter.setBrush(QBrush(gradient))
        painter.setPen(QPen(border_color, 2))
        painter.drawRoundedRect(rect, 10, 10)
        
        # رسم النص
        font_size = max(8, 12 - self.level)  # تقليل حجم الخط مع العمق
        font = QFont("Arial", font_size)
        font.setBold(True)
        painter.setFont(font)
        
        # تحديد لون النص
        if self._is_highlighted:
            text_color = QColor("#000000")
        painter.setPen(QPen(text_color))
        
        # رسم النص مع التفاف الكلمات
        text_rect = rect.adjusted(10, 5, -10, -5)
        painter.drawText(text_rect, Qt.AlignCenter | Qt.TextWordWrap, self.text)

    def hoverEnterEvent(self, event):
        """معالجة حدث دخول المؤشر"""
        self._is_hovered = True
        self.update()
        super().hoverEnterEvent(event)

    def hoverLeaveEvent(self, event):
        """معالجة حدث خروج المؤشر"""
        self._is_hovered = False
        self.update()
        super().hoverLeaveEvent(event)

    def mousePressEvent(self, event):
        """معالجة حدث الضغط بالمؤشر"""
        self._is_selected = True
        self.update()
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        """معالجة حدث تحرير المؤشر"""
        self._is_selected = False
        self.update()
        super().mouseReleaseEvent(event)

    def itemChange(self, change, value):
        """معالجة تغييرات العقدة"""
        if change == QGraphicsItem.ItemPositionChange and self.scene():
            # تحديث الروابط عند تحريك العقدة
            for item in self.scene().items():
                if isinstance(item, Connection) and (item.startNode == self or item.endNode == self):
                    item.updatePosition()
        return super().itemChange(change, value)

class Connection(QGraphicsPathItem):
    def __init__(self, startNode, endNode):
        super().__init__()
        self.startNode = startNode
        self.endNode = endNode
        
        # خصائص الرابط
        self.setZValue(-1)  # جعل الروابط خلف العقد
        self.updatePosition()
        
        # تأثيرات الرابط
        self._is_highlighted = False
        self.setPen(self.createConnectionPen())

    def createConnectionPen(self):
        """إنشاء قلم الرابط"""
        pen = QPen()
        pen.setWidth(2)
        
        # تحديد لون ونمط الرابط حسب المستوى
        if self.endNode.level <= 1:
            pen.setColor(QColor("#546E7A"))
            pen.setStyle(Qt.SolidLine)
        else:
            pen.setColor(QColor("#78909C"))
            pen.setStyle(Qt.DashLine)
            pen.setDashPattern([6, 3])
        
        pen.setCapStyle(Qt.RoundCap)
        pen.setJoinStyle(Qt.RoundJoin)
        return pen

    def updatePosition(self):
        """تحديث موقع وشكل الرابط"""
        if not self.startNode or not self.endNode:
            return
            
        # حساب نقاط البداية والنهاية
        start = self.startNode.pos()
        end = self.endNode.pos()
        
        # إنشاء مسار منحني
        path = QPainterPath()
        path.moveTo(start)
        
        # حساب نقاط التحكم للمنحنى
        dx = end.x() - start.x()
        dy = end.y() - start.y()
        
        # تعديل نقاط التحكم حسب المستوى
        if self.endNode.level <= 1:
            ctrl1 = QPointF(start.x() + dx * 0.5, start.y() + dy * 0.2)
            ctrl2 = QPointF(start.x() + dx * 0.5, end.y() - dy * 0.2)
        else:
            ctrl1 = QPointF(start.x() + dx * 0.3, start.y() + dy * 0.1)
            ctrl2 = QPointF(end.x() - dx * 0.3, end.y() - dy * 0.1)
        
        # رسم المنحنى
        path.cubicTo(ctrl1, ctrl2, end)
        self.setPath(path)

    def paint(self, painter, option, widget):
        """رسم الرابط"""
        painter.setRenderHint(QPainter.Antialiasing)
        
        # إنشاء تدرج لوني للرابط
        if self._is_highlighted:
            gradient = QLinearGradient(
                self.startNode.pos(),
                self.endNode.pos()
            )
            gradient.setColorAt(0, self.startNode.color_schemes[min(self.startNode.level, 4)]["highlight"])
            gradient.setColorAt(1, self.endNode.color_schemes[min(self.endNode.level, 4)]["highlight"])
            
            pen = self.createConnectionPen()
            pen.setBrush(QBrush(gradient))
            painter.setPen(pen)
        else:
            painter.setPen(self.createConnectionPen())
        
        painter.drawPath(self.path())