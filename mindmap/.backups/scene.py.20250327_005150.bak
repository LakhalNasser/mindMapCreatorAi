from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from .models import Node, Connection
import math

class MindMapScene(QGraphicsScene):
    def __init__(self):
        super().__init__()
        self.setSceneRect(-2000, -2000, 4000, 4000)
        
    def create_from_json(self, data):
        self.clear()
        
        def create_node_recursive(node_data, level=0, parent_node=None):
            if isinstance(node_data, dict):
                text = node_data.get('text', '')
                node = Node(text, level)
                self.addItem(node)
                
                if parent_node:
                    parent_node.add_child(node)
                
                if 'children' in node_data and node_data['children']:
                    for child_data in node_data['children']:
                        create_node_recursive(child_data, level + 1, node)
                        
                return node
            return None
        
        # Create center node
        center_node = Node(data['center'], 0)
        self.addItem(center_node)
        center_node.setPos(0, 0)
        
        # Create branches
        if 'branches' in data:
            branch_count = len(data['branches'])
            for i, branch_data in enumerate(data['branches']):
                angle = (360 / branch_count) * i
                create_node_recursive(branch_data, 1, center_node)
        
        # Arrange all nodes
        self.arrange_nodes(center_node)
        
        # Center the view
        self.views()[0].centerOn(center_node)
        
    def arrange_nodes(self, root_node, start_angle=0, angle_span=360):
        def arrange_recursive(node, level, angle, span):
            if not node.children:
                return
                
            child_count = len(node.children)
            child_span = span / child_count
            current_angle = angle - (span / 2)
            
            # تحسين المسافات بين المستويات
            base_radius = 250  # زيادة المسافة الأساسية
            level_factor = 0.8  # تقليل معامل التقلص
            radius = base_radius * (level_factor ** level)
            
            for child in node.children:
                child_angle = current_angle + (child_span / 2)
                x = radius * math.cos(math.radians(child_angle))
                y = radius * math.sin(math.radians(child_angle))
                
                # إضافة عشوائية صغيرة لتجنب التداخل
                x += random.uniform(-10, 10)
                y += random.uniform(-10, 10)
                
                child.setPos(node.pos() + QPointF(x, y))
                
                # تعديل زاوية الفروع للمستويات العميقة
                next_span = child_span * 0.9
                arrange_recursive(child, level + 1, child_angle, next_span)
                current_angle += child_span
        
        arrange_recursive(root_node, 0, start_angle, angle_span)